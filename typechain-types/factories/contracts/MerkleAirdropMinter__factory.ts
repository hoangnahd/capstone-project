/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MerkleAirdropMinter,
  MerkleAirdropMinterInterface,
} from "../../contracts/MerkleAirdropMinter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "oldRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "newRoot",
        type: "bytes32",
      },
    ],
    name: "MerkleRootUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract MyMintableToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "newRoot",
        type: "bytes32",
      },
    ],
    name: "updateMerkleRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161076438038061076483398101604081905261002f9161010a565b338061005657604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61005f816100ba565b50600180556001600160a01b0382166100a45760405162461bcd60e51b81526020600482015260076024820152660746f6b656e3d360cc1b604482015260640161004d565b6001600160a01b03909116608052600255610144565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561011d57600080fd5b82516001600160a01b038116811461013457600080fd5b6020939093015192949293505050565b6080516105fe6101666000396000818161014901526102c901526105fe6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d9578063c884ef83146100fe578063f2fde38b14610131578063fc0c546a1461014457600080fd5b80632eb4a7ab1461008d5780633d13f874146100a95780634783f0ef146100be578063715018a6146100d1575b600080fd5b61009660025481565b6040519081526020015b60405180910390f35b6100bc6100b73660046104f1565b61016b565b005b6100bc6100cc36600461057e565b61032e565b6100bc61037b565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100a0565b61012161010c366004610597565b60036020526000908152604090205460ff1681565b60405190151581526020016100a0565b6100bc61013f366004610597565b61038f565b6100e67f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b03841660009081526003602052604090205460ff16156101cb5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b60448201526064015b60405180910390fd5b6040516bffffffffffffffffffffffff19606086901b1660208201526034810184905260009060540160405160208183030381529060405280519060200120905061024d8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060025491508490506103cd565b6102895760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b60448201526064016101c2565b6001600160a01b0385811660009081526003602052604090819020805460ff19166001179055516340c10f1960e01b8152336004820152602481018690527f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b15801561030f57600080fd5b505af1158015610323573d6000803e3d6000fd5b505050505050505050565b6103366103e3565b600280549082905560408051828152602081018490527ffd69edeceaf1d6832d935be1fba54ca93bf17e71520c6c9ffc08d6e9529f8757910160405180910390a15050565b6103836103e3565b61038d6000610410565b565b6103976103e3565b6001600160a01b0381166103c157604051631e4fbdf760e01b8152600060048201526024016101c2565b6103ca81610410565b50565b6000826103da8584610460565b14949350505050565b6000546001600160a01b0316331461038d5760405163118cdaa760e01b81523360048201526024016101c2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815b845181101561049b5761049182868381518110610484576104846105b2565b60200260200101516104a3565b9150600101610465565b509392505050565b60008183106104bf5760008281526020849052604090206104ce565b60008381526020839052604090205b9392505050565b80356001600160a01b03811681146104ec57600080fd5b919050565b6000806000806060858703121561050757600080fd5b610510856104d5565b935060208501359250604085013567ffffffffffffffff81111561053357600080fd5b8501601f8101871361054457600080fd5b803567ffffffffffffffff81111561055b57600080fd5b8760208260051b840101111561057057600080fd5b949793965060200194505050565b60006020828403121561059057600080fd5b5035919050565b6000602082840312156105a957600080fd5b6104ce826104d5565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a892284b0185eaa77ffd0137067b8038a4118b28a3d602636cbfa01e1b51f8cd64736f6c634300081c0033";

type MerkleAirdropMinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleAirdropMinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleAirdropMinter__factory extends ContractFactory {
  constructor(...args: MerkleAirdropMinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    tokenAddress: AddressLike,
    _merkleRoot: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      tokenAddress,
      _merkleRoot,
      overrides || {}
    );
  }
  override deploy(
    tokenAddress: AddressLike,
    _merkleRoot: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(tokenAddress, _merkleRoot, overrides || {}) as Promise<
      MerkleAirdropMinter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MerkleAirdropMinter__factory {
    return super.connect(runner) as MerkleAirdropMinter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleAirdropMinterInterface {
    return new Interface(_abi) as MerkleAirdropMinterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MerkleAirdropMinter {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MerkleAirdropMinter;
  }
}
